// Code generated by ent, DO NOT EDIT.

package examples

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/uniteweb/entkit/examples/userversion"
)

// UserVersion is the model entity for the UserVersion schema.
type UserVersion struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 乐观锁版本号
	Version int `json:"version,omitempty"`
	// 用户名
	Name string `json:"name,omitempty"`
	// 年龄
	Age          int `json:"age,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserVersion) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userversion.FieldID, userversion.FieldVersion, userversion.FieldAge:
			values[i] = new(sql.NullInt64)
		case userversion.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserVersion fields.
func (uv *UserVersion) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userversion.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uv.ID = int(value.Int64)
		case userversion.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				uv.Version = int(value.Int64)
			}
		case userversion.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				uv.Name = value.String
			}
		case userversion.FieldAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				uv.Age = int(value.Int64)
			}
		default:
			uv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserVersion.
// This includes values selected through modifiers, order, etc.
func (uv *UserVersion) Value(name string) (ent.Value, error) {
	return uv.selectValues.Get(name)
}

// Update returns a builder for updating this UserVersion.
// Note that you need to call UserVersion.Unwrap() before calling this method if this UserVersion
// was returned from a transaction, and the transaction was committed or rolled back.
func (uv *UserVersion) Update() *UserVersionUpdateOne {
	return NewUserVersionClient(uv.config).UpdateOne(uv)
}

// Unwrap unwraps the UserVersion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uv *UserVersion) Unwrap() *UserVersion {
	_tx, ok := uv.config.driver.(*txDriver)
	if !ok {
		panic("examples: UserVersion is not a transactional entity")
	}
	uv.config.driver = _tx.drv
	return uv
}

// String implements the fmt.Stringer.
func (uv *UserVersion) String() string {
	var builder strings.Builder
	builder.WriteString("UserVersion(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uv.ID))
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", uv.Version))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(uv.Name)
	builder.WriteString(", ")
	builder.WriteString("age=")
	builder.WriteString(fmt.Sprintf("%v", uv.Age))
	builder.WriteByte(')')
	return builder.String()
}

// UserVersions is a parsable slice of UserVersion.
type UserVersions []*UserVersion
