// Code generated by ent, DO NOT EDIT.

package examples

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/uniteweb/entkit/examples/predicate"
	"github.com/uniteweb/entkit/examples/userversion"
)

// UserVersionUpdate is the builder for updating UserVersion entities.
type UserVersionUpdate struct {
	config
	hooks    []Hook
	mutation *UserVersionMutation
}

// Where appends a list predicates to the UserVersionUpdate builder.
func (uvu *UserVersionUpdate) Where(ps ...predicate.UserVersion) *UserVersionUpdate {
	uvu.mutation.Where(ps...)
	return uvu
}

// SetVersion sets the "version" field.
func (uvu *UserVersionUpdate) SetVersion(i int) *UserVersionUpdate {
	uvu.mutation.ResetVersion()
	uvu.mutation.SetVersion(i)
	return uvu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (uvu *UserVersionUpdate) SetNillableVersion(i *int) *UserVersionUpdate {
	if i != nil {
		uvu.SetVersion(*i)
	}
	return uvu
}

// AddVersion adds i to the "version" field.
func (uvu *UserVersionUpdate) AddVersion(i int) *UserVersionUpdate {
	uvu.mutation.AddVersion(i)
	return uvu
}

// SetName sets the "name" field.
func (uvu *UserVersionUpdate) SetName(s string) *UserVersionUpdate {
	uvu.mutation.SetName(s)
	return uvu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uvu *UserVersionUpdate) SetNillableName(s *string) *UserVersionUpdate {
	if s != nil {
		uvu.SetName(*s)
	}
	return uvu
}

// SetAge sets the "age" field.
func (uvu *UserVersionUpdate) SetAge(i int) *UserVersionUpdate {
	uvu.mutation.ResetAge()
	uvu.mutation.SetAge(i)
	return uvu
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (uvu *UserVersionUpdate) SetNillableAge(i *int) *UserVersionUpdate {
	if i != nil {
		uvu.SetAge(*i)
	}
	return uvu
}

// AddAge adds i to the "age" field.
func (uvu *UserVersionUpdate) AddAge(i int) *UserVersionUpdate {
	uvu.mutation.AddAge(i)
	return uvu
}

// Mutation returns the UserVersionMutation object of the builder.
func (uvu *UserVersionUpdate) Mutation() *UserVersionMutation {
	return uvu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uvu *UserVersionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uvu.sqlSave, uvu.mutation, uvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uvu *UserVersionUpdate) SaveX(ctx context.Context) int {
	affected, err := uvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uvu *UserVersionUpdate) Exec(ctx context.Context) error {
	_, err := uvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uvu *UserVersionUpdate) ExecX(ctx context.Context) {
	if err := uvu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uvu *UserVersionUpdate) check() error {
	if v, ok := uvu.mutation.Version(); ok {
		if err := userversion.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`examples: validator failed for field "UserVersion.version": %w`, err)}
		}
	}
	if v, ok := uvu.mutation.Age(); ok {
		if err := userversion.AgeValidator(v); err != nil {
			return &ValidationError{Name: "age", err: fmt.Errorf(`examples: validator failed for field "UserVersion.age": %w`, err)}
		}
	}
	return nil
}

func (uvu *UserVersionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uvu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userversion.Table, userversion.Columns, sqlgraph.NewFieldSpec(userversion.FieldID, field.TypeInt))
	if ps := uvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uvu.mutation.Version(); ok {
		_spec.SetField(userversion.FieldVersion, field.TypeInt, value)
	}
	if value, ok := uvu.mutation.AddedVersion(); ok {
		_spec.AddField(userversion.FieldVersion, field.TypeInt, value)
	}
	if value, ok := uvu.mutation.Name(); ok {
		_spec.SetField(userversion.FieldName, field.TypeString, value)
	}
	if value, ok := uvu.mutation.Age(); ok {
		_spec.SetField(userversion.FieldAge, field.TypeInt, value)
	}
	if value, ok := uvu.mutation.AddedAge(); ok {
		_spec.AddField(userversion.FieldAge, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uvu.mutation.done = true
	return n, nil
}

// UserVersionUpdateOne is the builder for updating a single UserVersion entity.
type UserVersionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserVersionMutation
}

// SetVersion sets the "version" field.
func (uvuo *UserVersionUpdateOne) SetVersion(i int) *UserVersionUpdateOne {
	uvuo.mutation.ResetVersion()
	uvuo.mutation.SetVersion(i)
	return uvuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (uvuo *UserVersionUpdateOne) SetNillableVersion(i *int) *UserVersionUpdateOne {
	if i != nil {
		uvuo.SetVersion(*i)
	}
	return uvuo
}

// AddVersion adds i to the "version" field.
func (uvuo *UserVersionUpdateOne) AddVersion(i int) *UserVersionUpdateOne {
	uvuo.mutation.AddVersion(i)
	return uvuo
}

// SetName sets the "name" field.
func (uvuo *UserVersionUpdateOne) SetName(s string) *UserVersionUpdateOne {
	uvuo.mutation.SetName(s)
	return uvuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uvuo *UserVersionUpdateOne) SetNillableName(s *string) *UserVersionUpdateOne {
	if s != nil {
		uvuo.SetName(*s)
	}
	return uvuo
}

// SetAge sets the "age" field.
func (uvuo *UserVersionUpdateOne) SetAge(i int) *UserVersionUpdateOne {
	uvuo.mutation.ResetAge()
	uvuo.mutation.SetAge(i)
	return uvuo
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (uvuo *UserVersionUpdateOne) SetNillableAge(i *int) *UserVersionUpdateOne {
	if i != nil {
		uvuo.SetAge(*i)
	}
	return uvuo
}

// AddAge adds i to the "age" field.
func (uvuo *UserVersionUpdateOne) AddAge(i int) *UserVersionUpdateOne {
	uvuo.mutation.AddAge(i)
	return uvuo
}

// Mutation returns the UserVersionMutation object of the builder.
func (uvuo *UserVersionUpdateOne) Mutation() *UserVersionMutation {
	return uvuo.mutation
}

// Where appends a list predicates to the UserVersionUpdate builder.
func (uvuo *UserVersionUpdateOne) Where(ps ...predicate.UserVersion) *UserVersionUpdateOne {
	uvuo.mutation.Where(ps...)
	return uvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uvuo *UserVersionUpdateOne) Select(field string, fields ...string) *UserVersionUpdateOne {
	uvuo.fields = append([]string{field}, fields...)
	return uvuo
}

// Save executes the query and returns the updated UserVersion entity.
func (uvuo *UserVersionUpdateOne) Save(ctx context.Context) (*UserVersion, error) {
	return withHooks(ctx, uvuo.sqlSave, uvuo.mutation, uvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uvuo *UserVersionUpdateOne) SaveX(ctx context.Context) *UserVersion {
	node, err := uvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uvuo *UserVersionUpdateOne) Exec(ctx context.Context) error {
	_, err := uvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uvuo *UserVersionUpdateOne) ExecX(ctx context.Context) {
	if err := uvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uvuo *UserVersionUpdateOne) check() error {
	if v, ok := uvuo.mutation.Version(); ok {
		if err := userversion.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`examples: validator failed for field "UserVersion.version": %w`, err)}
		}
	}
	if v, ok := uvuo.mutation.Age(); ok {
		if err := userversion.AgeValidator(v); err != nil {
			return &ValidationError{Name: "age", err: fmt.Errorf(`examples: validator failed for field "UserVersion.age": %w`, err)}
		}
	}
	return nil
}

func (uvuo *UserVersionUpdateOne) sqlSave(ctx context.Context) (_node *UserVersion, err error) {
	if err := uvuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userversion.Table, userversion.Columns, sqlgraph.NewFieldSpec(userversion.FieldID, field.TypeInt))
	id, ok := uvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`examples: missing "UserVersion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userversion.FieldID)
		for _, f := range fields {
			if !userversion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("examples: invalid field %q for query", f)}
			}
			if f != userversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uvuo.mutation.Version(); ok {
		_spec.SetField(userversion.FieldVersion, field.TypeInt, value)
	}
	if value, ok := uvuo.mutation.AddedVersion(); ok {
		_spec.AddField(userversion.FieldVersion, field.TypeInt, value)
	}
	if value, ok := uvuo.mutation.Name(); ok {
		_spec.SetField(userversion.FieldName, field.TypeString, value)
	}
	if value, ok := uvuo.mutation.Age(); ok {
		_spec.SetField(userversion.FieldAge, field.TypeInt, value)
	}
	if value, ok := uvuo.mutation.AddedAge(); ok {
		_spec.AddField(userversion.FieldAge, field.TypeInt, value)
	}
	_node = &UserVersion{config: uvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uvuo.mutation.done = true
	return _node, nil
}
