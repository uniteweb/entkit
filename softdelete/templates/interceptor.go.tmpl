{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{ with $.Header }} {{.}}  {{else}} //Code generated by ent-softdelete, DO NOT EDIT. {{end}}

package softdelete 

import  "slices"


var schemaWithDeletedAt = []string{
{{- range $node := .Nodes }}
{{- if $t := $node.Annotations.SoftDelete }}
    "{{ $t.Name}}",
{{- end }}
{{- end }}
}


type SkipSoftDeleteKey struct{}

// Skip SoftDelete return a new context that skips the soft-delete by interceptor/mutators.
func SkipSoftDelete(ctx context.Context) context.Context {
	return context.WithValue(ctx,  SkipSoftDeleteKey{}, true)
}

func Interceptor() ent.Interceptor {

    return intercept.TraverseFunc(
        func(ctx context.Context, q intercept.Query) error {
            if skip , _ := ctx.Value(SkipSoftDeleteKey{}).(bool); skip {
                return nil
            }

            if slices.Contains(schemaWithDeletedAt, q.Type()) {
                WhereDeletedAtIsNull(q)
            }
            return  nil
        },
    )
}

func WhereDeletedAtIsNull(w interface{ WhereP(...func(*sql.Selector)) }) {
	w.WhereP(
		sql.FieldIsNull("deleted_at"),
	)
}


